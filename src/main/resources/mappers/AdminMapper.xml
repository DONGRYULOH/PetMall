<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dongmall.admin.dao.AdminDao">
	
	<!-- 카테고리 호출 -->
	<!--
		 카테고리참조코드가 NULL것은  최상위 부모이므로 LEVEL이 1이고 
		 카테고리참조코드가 NULL이 아닌것은  참조할 부모가 있다는 뜻이므로 LEVEL 1이아님  
	-->
	<select id="category" resultType="kr.or.dongmall.admin.dto.CategoryDto">
		SELECT 1 AS level, category_code, category_name, category_ref_code FROM product_category WHERE category_ref_code is NULL
		UNION ALL
		SELECT 2 AS level, category_code, category_name, category_ref_code FROM product_category WHERE category_ref_code IS NOT null
		ORDER BY category_code
	</select>

	<!-- 상품등록 -->
	<insert id="product_insert" parameterType="hashmap" useGeneratedKeys="true" keyProperty="product_number">
		insert into product(category_code,product_name,product_price,product_stock,product_desc)
		values(#{category_code},#{product_name},#{product_price},#{product_stock},#{product_desc})
		<selectKey keyProperty="product_number" resultType="string" order="AFTER">
			select max(product_number) from product
		</selectKey>	
	</insert>
	
	<!-- 상품목록 (해당 상품에 대한 썸네일이 여러장 존재할경우 대표사진 한장만 보여주기 ) -->
	<select id="product_list" resultType="kr.or.dongmall.main.dto.ProductDto">
		SELECT P.product_number,P.product_name,P.category_code,P.product_price,P.product_stock,P.product_desc,P.product_date,PI.stored_thumbNail
		FROM Product P INNER JOIN (SELECT product_number,stored_thumbNail  FROM Product_imageFile where delegate_thumbNail = 'Y' AND delete_check = 'N') PI
		ON P.product_number = PI.product_number
		ORDER BY P.product_number DESC
	</select>
	
	<!-- 해당 상품호출 -->
	<!-- <select id="product_detail" resultType="kr.or.dongmall.main.dto.ProductDto">
		select product_number,product_name,product_category,product_price,product_stock,product_desc,product_image,product_date
		from product
		where product_number=#{product_number}
	</select> -->
	
	<!-- 상품조회(해당 상품의 썸네일이 여러장이 있을수도 있음) + 카테고리 조인(해당 상품의 카테고리 이름과 상위 카테고리 이름을 가져옴) -->
	<select id="product_detail"  parameterType="Integer" resultType="kr.or.dongmall.main.dto.ProductCateDto">
		SELECT P.product_number,P.product_name,P.product_price,P.product_stock,P.product_desc,P.product_date,P.product_hits,PC.category_code,PC.category_name,PC.category_ref_code 
		FROM Product P INNER JOIN Product_category PC
		ON P.category_code = PC.category_code
		WHERE product_number = #{product_number}
	</select>
	
	<!-- 해당 상품수정(상품이미지 파일제외)  -->
	<update id="product_update" parameterType="kr.or.dongmall.main.dto.ProductCateDto">
		update product 
		set 
			product_name = #{product_name},
			category_code = #{category_code},
			product_price = #{product_price},
		    product_stock = #{product_stock},
		    product_desc = #{product_desc} 
		where product_number = #{product_number}  
	</update>
	
	<!-- 해당 상품삭제-->
	<delete id="product_delete" parameterType="Integer">
		delete from product 
		where product_number = #{product_number}
	</delete>
	
	<!--  ********************************************** 상품 이미지 파일 ************************************** -->
	<!-- 해당 상품의 이미지파일 삭제여부 YES  -->
	<update id="deleteFileList" parameterType="hashmap">
		UPDATE Product_imageFile SET delete_check = 'Y'
		WHERE product_number = #{product_number}
	</update>
	
	<!-- 해당 상품의 신규 이미지 파일등록 -->
	<insert id="insertFile" parameterType="hashmap" >
		INSERT INTO Product_imageFile(product_number,origin_file_name,stored_file_name,stored_thumbNail,delegate_thumbNail,file_size)
					VALUES(#{product_number},#{ORIGINAL_FILE_NAME},#{STORED_FILE_NAME},#{STORED_ThumbNail},#{delegate_thumbNail},#{FILE_SIZE})
	</insert>
	
	<!-- 해당 상품에 해당되는 이미지 파일가져오기(해당 상품조회시)  -->
	<select id="product_img"  parameterType="Integer" resultType="kr.or.dongmall.admin.dto.Product_ImageFile">
		SELECT file_number,stored_thumbNail,delegate_thumbNail FROM Product_imageFile WHERE product_number = #{product_number} AND delete_check='N'
	</select>
	
	<!-- 기존에 저장된 파일인 경우 삭제했던 delete_check(Y) -> delete_check(N) 바꿈 (대표 썸네일 이미지 체크여부 업데이트 처리) -->
	<update id="updateFile" parameterType="hashmap">
		UPDATE Product_imageFile SET delete_check = 'N',delegate_thumbNail=#{delegate_thumbNail} WHERE file_number = #{FILE_IDX}
	</update>
	
	<!--  ********************************************** 환불 요청 관련 쿼리문  ************************************** -->
	
	<!-- 환불 요청 내역리스트를 가져옴(환불번호,주문상세번호,처리상태) -->
	<select id="RefundList" resultType="kr.or.dongmall.shop.dto.OrderRefundDto">
		SELECT O.refund_number,O.order_detail_number,D.order_detail_status
			FROM Order_refund O JOIN Order_Detail D 
				ON O.order_detail_number = D.order_detail_number
	</select>
	
	<!-- 환불번호에 해당되는 환불정보 가져오기 -->
	<select id="getRefundInfo" resultType="kr.or.dongmall.shop.dto.OrderRefundDto">
		SELECT A.refund_number,A.order_detail_number,A.refund_reason,A.refund_img,O.order_number,O.product_count,O.product_price
			FROM Order_refund A JOIN Order_detail O
			ON A.order_detail_number = O.order_detail_number
		WHERE refund_number = #{refund_number}
	</select>
	
	<!-- 환불 주문정보 업데이트 처리(환불 처리상태 -> PaymentRefundOk(환불완료) , 환불 가능여부 -> N -->
	<update id="RefundInfoUpdate">
		UPDATE order_detail 
			SET order_detail_status = 'PaymentRefundOk',refund_check = 'N' 
		WHERE order_number = #{merchant_uid} 
	</update>
	
</mapper>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	